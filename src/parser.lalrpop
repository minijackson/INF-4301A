use ast::{Exprs, Expr, BinaryOpCode, UnaryOpCode, Binding, Span};
use type_sys;

use std::str::FromStr;

grammar;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SpannedComma<T>: Vec<(T, Span)> = {
    <v:(<@L> <T> <@R> ",")*> <e:(<@L> <T> <@R>)?> => {
        match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        }
        .into_iter()
        .map(|(start, thing, end)| {
            (thing, Span(start, end))
        })
        .collect()
    }
};

pub Expressions: Exprs = {
    <Comma<Expression>> => Exprs { exprs: <> }
};

pub Expression: Box<Expr> = {
    Tier0
};

//==================
//== Control Flow ==
//==================

Tier0: Box<Expr> = {
    If, While,For,
    Tier1
};

If: Box<Expr> = {
    "if" <cond_start:@L> <cond:Expression> <cond_end:@R> "then" <true_branch:Expression> "else" <false_branch_start:@L> <false_branch:Expression> <false_branch_end:@R>
        => Box::new(Expr::If {
            cond,
            true_branch,
            false_branch,
            cond_span: Span(cond_start, cond_end),
            false_branch_span: Span(false_branch_start, false_branch_end),
        })
};

While: Box<Expr> = {
    "while" <cond_start:@L> <cond:Expression> <cond_end:@R> "do" <expr:Expression>
        => Box::new(Expr::While {
            cond,
            expr,
            cond_span: Span(cond_start, cond_end),
        })
};

For: Box<Expr> = {
    "for" <bind:Declaration> "to" <goal_start:@L> <goal:Expression> <goal_end:@R> "do"  <expr:Expression>
        => Box::new(Expr::For {
            binding: Box::new(bind),
            goal,
            expr,
            goal_span: Span(goal_start, goal_end),
        })
};

//===============
//== Operators ==
//===============

Tier1: Box<Expr> = {
    <name_start:@L> <name:Identifier> <name_end:@R> ":=" <value_start:@L> <value:Expression> <value_end:@R>
        => Box::new(Expr::Assign {
            name,
            name_span: Span(name_start, name_end),
            value,
            value_span: Span(value_start, value_end),
        }),
    Tier2
};

BinOpTier<Op, NextTier>: Box<Expr> = {
    <start:@L> <lhs:BinOpTier<Op, NextTier>> <op:Op> <rhs:NextTier> <end:@R>
        => Box::new(Expr::BinaryOp {
            lhs,
            rhs,
            op,
            span: Span(start, end),
        }),
    NextTier
};

Tier2 = BinOpTier<Tier2Op, Tier3>;
Tier2Op: BinaryOpCode = {
    "="  => BinaryOpCode::Eq,
    "<>" => BinaryOpCode::Ne,
};

Tier3 = BinOpTier<Tier3Op, Tier4>;
Tier3Op: BinaryOpCode = {
    "<"  => BinaryOpCode::Lt,
    "<=" => BinaryOpCode::Le,
    ">"  => BinaryOpCode::Gt,
    ">=" => BinaryOpCode::Ge,
};

Tier4 = BinOpTier<Tier4Op, Tier5>;
Tier4Op: BinaryOpCode = {
    "+" => BinaryOpCode::Add,
    "-" => BinaryOpCode::Sub,
};

Tier5 = BinOpTier<Tier5Op, UnaryOpExp>;
Tier5Op: BinaryOpCode = {
    "*" => BinaryOpCode::Mul,
    "/" => BinaryOpCode::Div,
};

UnaryOpExp: Box<Expr> = {
    <start:@L> <op:UnaryOp> <expr:Factor> <end:@R>
        => Box::new(Expr::UnaryOp {
            expr,
            op,
            span: Span(start, end),
        }),
    Factor
};

UnaryOp: UnaryOpCode = {
    "" => UnaryOpCode::Plus,
    "+" => UnaryOpCode::Plus,
    "-" => UnaryOpCode::Minus
};

//==========
//== Rest ==
//==========

pub Factor: Box<Expr> = {
    Let,
    Variable,
    Value,
    "(" <Expression> ")" => <>,
    "(" <expr:Expression> "," <exprs:Expressions> ")" => {
        let mut exprs = exprs;
        exprs.exprs.insert(0, expr);
        Box::new(Expr::Grouping(exprs))
    },
    FunctionCall
};

Let: Box<Expr> = {
    "let" <declarations:(<Declaration>)*> "in" <exprs:Expressions> "end"
        => Box::new(Expr::Let(declarations, exprs))
};

Declaration: Binding = {
    <start:@L> "var" <name:Identifier> ":=" <value_start:@L> <exp:Expression> <value_end:@R>
        => Binding{
            variable: name,
            value: *exp,
            span: Span(start, value_end),
            value_span: Span(value_start, value_end),
        }
};

FunctionCall: Box<Expr> = {
    <start:@L> <name:Identifier> "(" <args:Args> ")" <end:@R>
        => Box::new(Expr::Function {
            name,
            args,
            span: Span(start, end),
        })
};

Args = SpannedComma<Expression>;

Variable: Box<Expr> = <start:@L> <name: Identifier> <end:@R>
    => Box::new(Expr::Variable { name, span: Span(start, end) });

Value: Box<Expr> = {
    r"[0-9]+" => Box::new(Expr::Value(
                    type_sys::Value::Integer(
                        i32::from_str(<>).unwrap()
                        )
                    )
                 ),
    r"[0-9]+\.[0-9]*" => Box::new(Expr::Value(
                    type_sys::Value::Float(
                        f32::from_str(<>).unwrap()
                        )
                    )
                 ),
    r#""(?:[^"\\]|\\.)*""# => {
        let mut val = <>.to_string();
        // Remove quotes
        val.remove(0);
        val.pop();
        let val = type_sys::unescape_str(val);
        Box::new(Expr::Value(type_sys::Value::Str(val)))
    },
    "true"  => Box::new(Expr::Value(type_sys::Value::Bool(true))),
    "false" => Box::new(Expr::Value(type_sys::Value::Bool(false))),
};

Identifier: String = r"[[:alpha:]][[:alnum:]_]*" => <>.to_string();
