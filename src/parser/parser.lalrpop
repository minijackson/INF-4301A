use ast::{Exprs, Expr, BinaryOpCode, UnaryOpCode, Declaration, VariableDecl, FunctionDecl, ArgumentDecl, Span};
use error::UserParseError;
use type_sys;

use lalrpop_util::ParseError;

use std::str::FromStr;

grammar;

extern {
    type Error = UserParseError;
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SpannedComma<T>: Vec<(T, Span)> = {
    <v:(<@L> <T> <@R> ",")*> <e:(<@L> <T> <@R>)?> => {
        match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        }
        .into_iter()
        .map(|(start, thing, end)| {
            (thing, Span(start, end))
        })
        .collect()
    }
};

pub Expressions: Exprs = {
    <Comma<Expression>> => Exprs { exprs: <> }
};

pub Expression: Box<Expr> = {
    Tier0
};

//==================
//== Control Flow ==
//==================

Tier0: Box<Expr> = {
    If, While, For,
    Let,
    Tier1
};

If: Box<Expr> = {
    "if" <cond_start:@L> <cond:Expression> <cond_end:@R> "then" <true_branch_start:@L> <true_branch:Expression> <true_branch_end:@R> "else" <false_branch_start:@L> <false_branch:Expression> <false_branch_end:@R>
        => Box::new(Expr::If {
            cond,
            cond_span: Span(cond_start, cond_end),
            true_branch,
            true_branch_span: Span(true_branch_start, true_branch_end),
            false_branch,
            false_branch_span: Span(false_branch_start, false_branch_end),
        })
};

While: Box<Expr> = {
    "while" <cond_start:@L> <cond:Expression> <cond_end:@R> "do" <expr:Expression>
        => Box::new(Expr::While {
            cond,
            cond_span: Span(cond_start, cond_end),
            expr,
        })
};

For: Box<Expr> = {
    "for" <bind:VariableDecl> "to" <goal_start:@L> <goal:Expression> <goal_end:@R> "do"  <expr:Expression>
        => Box::new(Expr::For {
            binding: Box::new(bind),
            goal,
            goal_span: Span(goal_start, goal_end),
            expr,
        })
};

//===============
//== Operators ==
//===============

Tier1: Box<Expr> = {
    <name_start:@L> <name:Identifier> <name_end:@R> ":=" <value_start:@L> <value:Expression> <value_end:@R>
        => Box::new(Expr::Assign {
            name,
            name_span: Span(name_start, name_end),
            value,
            value_span: Span(value_start, value_end),
        }),

    "match" <lhs_patt_start:@L> <patt:Pattern> <lhs_patt_end:@R> ":=" <rhs_patt_start:@L> <value:Expression> <rhs_patt_end:@R>
        => Box::new(Expr::PatternMatch {
            lhs: patt,
            lhs_span: Span(lhs_patt_start, lhs_patt_end),
            rhs: value,
            rhs_span: Span(rhs_patt_start, rhs_patt_end),
        }),

    Tier2
};

Pattern: Box<Expr> = {
    Literal,
    Variable,
    Array<Pattern>,
    Tuple<Pattern>,
};

BinOpTier<Op, NextTier>: Box<Expr> = {
    <start:@L> <lhs:BinOpTier<Op, NextTier>> <op:Op> <rhs:NextTier> <end:@R>
        => Box::new(Expr::BinaryOp {
            lhs,
            rhs,
            op,
            span: Span(start, end),
        }),
    NextTier
};

Tier2 = BinOpTier<Tier2Op, Tier3>;
Tier2Op: BinaryOpCode = {
    "="  => BinaryOpCode::Eq,
    "<>" => BinaryOpCode::Ne,
};

Tier3 = BinOpTier<Tier3Op, Tier4>;
Tier3Op: BinaryOpCode = {
    "<"  => BinaryOpCode::Lt,
    "<=" => BinaryOpCode::Le,
    ">"  => BinaryOpCode::Gt,
    ">=" => BinaryOpCode::Ge,
};

Tier4 = BinOpTier<Tier4Op, Tier5>;
Tier4Op: BinaryOpCode = {
    "+" => BinaryOpCode::Add,
    "-" => BinaryOpCode::Sub,
};

Tier5 = BinOpTier<Tier5Op, Tier6>;
Tier5Op: BinaryOpCode = {
    "*" => BinaryOpCode::Mul,
    "/" => BinaryOpCode::Div,
};

Tier6: Box<Expr> = {
    <expr_start:@L> <expr:Tier6> <expr_end:@R> "as" <dest:Type>
        => Box::new(Expr::Cast {
            expr,
            expr_span: Span(expr_start, expr_end),
            dest,
        }),
    UnaryOpExp
};

UnaryOpExp: Box<Expr> = {
    <start:@L> <op:UnaryOp> <expr:Factor> <end:@R>
        => Box::new(Expr::UnaryOp {
            expr,
            op,
            span: Span(start, end),
        }),
    Factor
};

UnaryOp: UnaryOpCode = {
    "" => UnaryOpCode::Plus,
    "+" => UnaryOpCode::Plus,
    "-" => UnaryOpCode::Minus
};

//==========
//== Rest ==
//==========

pub Factor: Box<Expr> = {
    Variable,
    Array<Expression>,
    Tuple<Expression>,
    Literal,
    "(" <Expression> ")" => <>,
    "(" <expr:Expression> "," <exprs:Expressions> ")" => {
        let mut exprs = exprs;
        exprs.exprs.insert(0, expr);
        Box::new(Expr::Grouping(exprs))
    },
    FunctionCall
};

Let: Box<Expr> = {
    "let" <declarations:(<Declaration>)*> "in" <exprs:Expressions> "end"
        => {
            let mut bindings = Vec::new();
            let mut function_decls = Vec::new();

            for declaration in declarations.into_iter() {
                match declaration {
                    Declaration::Variable(binding) => bindings.push(binding),
                    Declaration::Function(function_decl) => function_decls.push(function_decl),
                    Declaration::Argument(_) => unreachable!("Declaration of an argument in a Let block"),
                }
            }

            Box::new(Expr::Let(bindings, function_decls, exprs))
        }
};

Declaration: Declaration = {
    <VariableDecl> => Declaration::Variable(<>),
    <FunctionDecl> => Declaration::Function(<>),
};

VariableDecl: VariableDecl = {
    <start:@L> "var" <name:Identifier> ":=" <value_start:@L> <exp:Expression> <value_end:@R>
        => VariableDecl {
            name,
            value: *exp,
            span: Span(start, value_end),
            value_span: Span(value_start, value_end),
        }
};

FunctionDecl: FunctionDecl = {
    <signature_start:@L> "function" <name:Identifier> "(" <args:ArgDecls> ")" ":" <return_type:Type> <signature_end:@R> ":=" <body_start:@L> <body:Expression> <body_end:@R>
        => FunctionDecl {
            name,
            args,
            return_type,
            signature_span: Span(signature_start, signature_end),
            body,
            body_span: Span(body_start, body_end),
        }
};

ArgDecl: ArgumentDecl = {
    <start:@L> <name:Identifier> ":" <type_:Type> <end:@R>
        => ArgumentDecl{
            name,
            type_,
            span: Span(start, end),
        }
};

ArgDecls = Comma<ArgDecl>;

FunctionCall: Box<Expr> = {
    <start:@L> <name:Identifier> "(" <args:Args> ")" <end:@R>
        => Box::new(Expr::Function {
            name,
            args,
            span: Span(start, end),
        })
};

Args = SpannedComma<Expression>;

Variable: Box<Expr> = <start:@L> <name: Identifier> <end:@R>
    => Box::new(Expr::Variable { name, span: Span(start, end) });

Literal: Box<Expr> = {
    <start:@L> <val:r"[0-9]+"> <end:@R> =>?
                        i64::from_str(val)
                            .map_err(|_| {
                                ParseError::User {
                                    error: UserParseError::IntegerOverflow {
                                        span: Span(start, end)
                                    }
                                }
                            })
                            .map(type_sys::Value::Integer)
                            .map(Expr::Value)
                            .map(Box::new),

    r"[0-9]+\.[0-9]*" => Box::new(Expr::Value(
                    type_sys::Value::Float(
                        f64::from_str(<>).unwrap()
                        )
                    )
                 ),
    <start:@L> <val:r#""(?:[^"\\]|\\.)*""#> <end:@R> =>? {
        let mut val = val.to_string();
        // Remove quotes
        val.remove(0);
        val.pop();

        type_sys::unescape_str(&val)
            .map_err(|id| {
                ParseError::User {
                    error: UserParseError::InvalidStringEscapeSequence {
                        sequence_id: id,
                        span: Span(start, end),
                    }
                }
            })
            .map(type_sys::Value::Str)
            .map(Expr::Value)
            .map(Box::new)
    },
    "true"  => Box::new(Expr::Value(type_sys::Value::Bool(true))),
    "false" => Box::new(Expr::Value(type_sys::Value::Bool(false))),
};

Array<T>: Box<Expr> = {
    <start:@L> <declared_type:(<@L> <Type> <@R>)?> "[" <values:SpannedComma<T>> "]" <end:@R>
        => {
            let (declared_type, declared_type_span) = if let Some((start, type_, end)) = declared_type {
                (Some(type_), Some(Span(start, end)))
            } else {
                (None, None)
            };

            Box::new(Expr::Array {
                values,
                declared_type,
                declared_type_span,
                span: Span(start, end),
            })
        },
};

Tuple<T>: Box<Expr> = {
    "{" <values:Comma<T>> "}" => Box::new(Expr::Tuple(values))
};

Type: type_sys::Type = {
    "Void" => type_sys::Type::Void,
    "Integer" => type_sys::Type::Integer,
    "Float" => type_sys::Type::Float,
    "Bool" => type_sys::Type::Bool,
    "Str" => type_sys::Type::Str,
    "Array" "(" <Type> ")" => type_sys::Type::Array(Box::new(<>)),
    "Tuple" "(" <Comma<Type>> ")" => type_sys::Type::Tuple(<>),
};

Identifier: String = r"[[:alpha:]][[:alnum:]_]*" => <>.to_string();
